apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: todo-app
  namespace: todo-application
  labels:
    service: todo
spec:
  replicas: 1
  strategy: {}
  template:
    metadata:
      labels:
        service: todo
      annotations:
        prometheus.io/path: '/actuator/prometheus'  # scrape both ports 5555 & 8888
        prometheus.io/scrape: 'true'
    spec:
      containers:
      - name: todo-app
        image: well5a/todolist
        #imagePullPolicy: IfNotPresent # pull from local repository
        command:
        - sh
        - -c
        - java -javaagent:/agent/inspectit-ocelot-agent.jar -jar /app.jar
        env:
        - name: INSPECTIT_EXPORTERS_METRICS_PROMETHEUS_PORT
          value: "8888"
        - name: INSPECTIT_SELF_MONITORING_ENABLED
          value: "true"
        - name: INSPECTIT_SERVICE_NAME
          value: todo-app
        - name: SPRING_DATASOURCE_URL
          value: jdbc:postgresql://todo-service:5432/tododb
        - name: SPRING_DATASOURCE_PASSWORD
          value: todo
        - name: SPRING_DATASOURCE_USERNAME
          value: todo
        ports:
        - containerPort: 5555
        - containerPort: 8888
        resources: {}
        volumeMounts:
          - name: todo-agent-volume
            mountPath: /agent
      restartPolicy: Always
      volumes:
        - name: todo-agent-volume
          persistentVolumeClaim:
            claimName: todo-agent-claim
status: {}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: todo-db
  namespace: todo-application
  labels:
    service: todo
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        service: todo
      annotations:
        prometheus.io/path: '/metrics'
        prometheus.io/port: '9187'
        prometheus.io/scrape: 'true'
    spec:
      containers:
        - name: todo-db
          image: postgres
          env:
            - name: POSTGRES_DB
              value: tododb
            - name: POSTGRES_PASSWORD
              value: todo
            - name: POSTGRES_USER
              value: todo
          ports:
            - containerPort: 5432
          resources: {}
          volumeMounts:
            - name: init-db-volume
              mountPath: /docker-entrypoint-initdb.d/
        - name: todo-db-exporter
          image: wrouesnel/postgres_exporter:latest
          env:
            - name: DATA_SOURCE_URI
              value: 0.0.0.0:5432/tododb?sslmode=disable # localhost is not working
            - name: DATA_SOURCE_USER
              value: todo
            - name: DATA_SOURCE_PASS
              value: todo
            - name: PG_EXPORTER_WEB_TELEMETRY_PATH
              value: /metrics
            - name: PG_EXPORTER_DISABLE_DEFAULT_METRICS
              value: "false"
            - name: PG_EXPORTER_EXTEND_QUERY_PATH
              value: /etc/config/queries.yml
          ports:
            - containerPort: 9187
          resources: {}
          volumeMounts:
            - name: todo-db-exporter-volume
              mountPath: /etc/config/
      restartPolicy: Always
      volumes:
        - name: todo-db-exporter-volume
          configMap:
            name: postgres-exporter-conf
        - name: init-db-volume
          configMap:
            name: init-db-conf
status: {}
---
apiVersion: v1
kind: Service
metadata:
  name: todo-service
  namespace: todo-application
spec:
  type: LoadBalancer
  selector:
    service: todo
  ports:
    - name: "application"
      port: 5555
      targetPort: 5555
    - name: "inspectit"
      port: 8888
      targetPort: 8888
    - name: "database"
      port: 5432
      targetPort: 5432
    - name: "database-exporter"
      port: 9187
      targetPort: 9187
status:
  loadBalancer: {}
# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: init-db-conf
#   namespace: todo-application
#   labels:
#     name: init-db-conf
# data:
#   init.sh: |-
#     #!/usr/bin/env bash
#     perl -pi -e "s/#shared_preload_libraries = ''/shared_preload_libraries = 'pg_stat_statements'/g" $PGDATA/postgresql.conf
#     #echo "shared_preload_libraries = 'pg_stat_statements'" >> $PGDATA/postgresql.conf
#     echo "pg_stat_statements.max = 10000" >> $PGDATA/postgresql.conf
#     echo "pg_stat_statements.track = all" >> $PGDATA/postgresql.conf

#     set -e
#     psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
#         CREATE USER todo01 WITH PASSWORD 'todo';
#         GRANT USAGE ON SCHEMA public TO todo01;
#         GRANT SELECT ON ALL TABLES IN SCHEMA public TO todo01;
#         GRANT todo TO todo01;
#         CREATE EXTENSION PG_STAT_STATEMENTS;
#     EOSQL
# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: postgres-exporter-conf
#   namespace: todo-application
#   labels:
#     name: postgres-exporter-conf
# data:
#   queries.yml: |-
#     pg_replication:
#       query: "SELECT EXTRACT(EPOCH FROM (now() - pg_last_xact_replay_timestamp()))::INT as lag"
#       metrics:
#         - lag:
#             usage: "GAUGE"
#             description: "Replication lag behind master in seconds"

#     pg_postmaster:
#       query: "SELECT pg_postmaster_start_time as start_time_seconds from pg_postmaster_start_time()"
#       metrics:
#         - start_time_seconds:
#             usage: "GAUGE"
#             description: "Time at which postmaster started"

#     pg_stat_user_tables:
#       query: "SELECT schemaname, relname, seq_scan, seq_tup_read, idx_scan, idx_tup_fetch, n_tup_ins, n_tup_upd, n_tup_del, n_tup_hot_upd, n_live_tup, n_dead_tup, n_mod_since_analyze, last_vacuum, last_autovacuum, last_analyze, last_autoanalyze, vacuum_count, autovacuum_count, analyze_count, autoanalyze_count FROM pg_stat_user_tables"
#       metrics:
#         - schemaname:
#             usage: "LABEL"
#             description: "Name of the schema that this table is in"
#         - relname:
#             usage: "LABEL"
#             description: "Name of this table"
#         - seq_scan:
#             usage: "COUNTER"
#             description: "Number of sequential scans initiated on this table"
#         - seq_tup_read:
#             usage: "COUNTER"
#             description: "Number of live rows fetched by sequential scans"
#         - idx_scan:
#             usage: "COUNTER"
#             description: "Number of index scans initiated on this table"
#         - idx_tup_fetch:
#             usage: "COUNTER"
#             description: "Number of live rows fetched by index scans"
#         - n_tup_ins:
#             usage: "COUNTER"
#             description: "Number of rows inserted"
#         - n_tup_upd:
#             usage: "COUNTER"
#             description: "Number of rows updated"
#         - n_tup_del:
#             usage: "COUNTER"
#             description: "Number of rows deleted"
#         - n_tup_hot_upd:
#             usage: "COUNTER"
#             description: "Number of rows HOT updated (i.e., with no separate index update required)"
#         - n_live_tup:
#             usage: "GAUGE"
#             description: "Estimated number of live rows"
#         - n_dead_tup:
#             usage: "GAUGE"
#             description: "Estimated number of dead rows"
#         - n_mod_since_analyze:
#             usage: "GAUGE"
#             description: "Estimated number of rows changed since last analyze"
#         - last_vacuum:
#             usage: "GAUGE"
#             description: "Last time at which this table was manually vacuumed (not counting VACUUM FULL)"
#         - last_autovacuum:
#             usage: "GAUGE"
#             description: "Last time at which this table was vacuumed by the autovacuum daemon"
#         - last_analyze:
#             usage: "GAUGE"
#             description: "Last time at which this table was manually analyzed"
#         - last_autoanalyze:
#             usage: "GAUGE"
#             description: "Last time at which this table was analyzed by the autovacuum daemon"
#         - vacuum_count:
#             usage: "COUNTER"
#             description: "Number of times this table has been manually vacuumed (not counting VACUUM FULL)"
#         - autovacuum_count:
#             usage: "COUNTER"
#             description: "Number of times this table has been vacuumed by the autovacuum daemon"
#         - analyze_count:
#             usage: "COUNTER"
#             description: "Number of times this table has been manually analyzed"
#         - autoanalyze_count:
#             usage: "COUNTER"
#             description: "Number of times this table has been analyzed by the autovacuum daemon"

#     pg_statio_user_tables:
#       query: "SELECT schemaname, relname, heap_blks_read, heap_blks_hit, idx_blks_read, idx_blks_hit, toast_blks_read, toast_blks_hit, tidx_blks_read, tidx_blks_hit FROM pg_statio_user_tables"
#       metrics:
#         - schemaname:
#             usage: "LABEL"
#             description: "Name of the schema that this table is in"
#         - relname:
#             usage: "LABEL"
#             description: "Name of this table"
#         - heap_blks_read:
#             usage: "COUNTER"
#             description: "Number of disk blocks read from this table"
#         - heap_blks_hit:
#             usage: "COUNTER"
#             description: "Number of buffer hits in this table"
#         - idx_blks_read:
#             usage: "COUNTER"
#             description: "Number of disk blocks read from all indexes on this table"
#         - idx_blks_hit:
#             usage: "COUNTER"
#             description: "Number of buffer hits in all indexes on this table"
#         - toast_blks_read:
#             usage: "COUNTER"
#             description: "Number of disk blocks read from this table's TOAST table (if any)"
#         - toast_blks_hit:
#             usage: "COUNTER"
#             description: "Number of buffer hits in this table's TOAST table (if any)"
#         - tidx_blks_read:
#             usage: "COUNTER"
#             description: "Number of disk blocks read from this table's TOAST table indexes (if any)"
#         - tidx_blks_hit:
#             usage: "COUNTER"
#             description: "Number of buffer hits in this table's TOAST table indexes (if any)"

#     pg_database:
#       query: " SELECT pg_database.datname, pg_database_size(pg_database.datname) as size FROM pg_database"
#       metrics:
#         - datname:
#             usage: "LABEL"
#             description: "Name of the database"
#         - size:
#             usage: "GAUGE"
#             description: "Disk space used by the database"

#     pg_class:
#       query: "SELECT relname, relpages, reltuples FROM pg_class"
#       metrics:
#         - relname:
#             usage: "LABEL"
#             description: "Name of the table, index, view, etc."
#         - relpages:
#             usage: "GAUGE"
#             description: "Size of the on-disk representation of this table in pages (of size BLCKSZ). This is only an estimate used by the planner. It is updated by VACUUM, ANALYZE, and a few DDL commands such as CREATE INDEX."
#         - reltuples:
#             usage: "COUNTER"
#             description: "Number of rows in the table. This is only an estimate used by the planner. It is updated by VACUUM, ANALYZE, and a few DDL commands such as CREATE INDEX."
    
#     pg_stat_statements:
#       query: "SELECT userid, dbid, queryid, query, calls, min_time, max_time, mean_time, total_time FROM pg_stat_statements(true) pg_stat_statements"
#       metrics:
#         - userid:
#             usage: "LABEL"
#             description: "OID of user who executed the statement"
#         - dbid:
#             usage: "LABEL"
#             description: "OID of database in which the statement was executed"
#         - queryid:
#             usage: "LABEL"
#             description: "Internal hash code, computed from the statement's parse tree"
#         - query:
#             usage: "LABEL"
#             description: "Text of a representative statement"
#         - total_time: 
#             usage: "GAUGE"
#             description: "Total time spent in the statement, in milliseconds"
