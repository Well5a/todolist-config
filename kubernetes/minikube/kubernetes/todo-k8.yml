apiVersion: apps/v1
kind: Deployment
metadata:
  name: todo-app
  namespace: todo-application
  labels:
    service: todo
spec:
  replicas: 1
  selector:
    matchLabels:
      service: todo
  strategy: {}
  template:
    metadata:
      labels:
        service: todo
      annotations:
        prometheus.io/path: '/actuator/prometheus'  # scrape both ports 5555 & 8888
        prometheus.io/scrape: 'true'
    spec:
      containers:
      - name: todo-app
        image: well5a/todolist
        #imagePullPolicy: IfNotPresent # pull from local repository
        command:
        - sh
        - -c
        - java -javaagent:/agent/inspectit-ocelot-agent.jar -jar /app.jar
        env:
        - name: INSPECTIT_EXPORTERS_METRICS_PROMETHEUS_PORT
          value: "8888"
        - name: INSPECTIT_SELF_MONITORING_ENABLED
          value: "true"
        - name: INSPECTIT_SERVICE_NAME
          value: todo-app
        - name: INSPECTIT_CONFIG_FILE_BASED_PATH
          value: /agentconfig
        - name: SPRING_DATASOURCE_URL
          value: jdbc:postgresql://todo-service:5432/tododb
        - name: SPRING_DATASOURCE_PASSWORD
          value: todo
        - name: SPRING_DATASOURCE_USERNAME
          value: todo
        ports:
        - containerPort: 5555
        - containerPort: 8888
        resources: {}
        volumeMounts:
          - name: todo-agent-volume
            mountPath: /agent
          - name: todo-agent-config-volume
            mountPath: /agentconfig
      restartPolicy: Always
      volumes:
        - name: todo-agent-volume
          persistentVolumeClaim:
            claimName: todo-agent-claim
        - name: todo-agent-config-volume
          configMap:
            name: inspectit-conf
 #         hostPath:   # hardcoded path
 #           path: ~/Documents/Studium/HS/monitoring-todolist/config/inspectit
 #           type: Directory
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todo-db
  namespace: todo-application
  labels:
    service: todo
spec:
  replicas: 1
  selector:
    matchLabels:
      service: todo
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        service: todo
      annotations:
        prometheus.io/path: '/metrics'
        prometheus.io/port: '9187'
        prometheus.io/scrape: 'true'
    spec:
      containers:
        - name: todo-db
          image: postgres
          env:
            - name: POSTGRES_DB
              value: tododb
            - name: POSTGRES_PASSWORD
              value: todo
            - name: POSTGRES_USER
              value: todo
          ports:
            - containerPort: 5432
          resources: {}
          volumeMounts:
            - name: init-db-volume
              mountPath: /docker-entrypoint-initdb.d/
        - name: todo-db-exporter
          image: wrouesnel/postgres_exporter:latest
          env:
            - name: DATA_SOURCE_URI
              value: 0.0.0.0:5432/tododb?sslmode=disable # localhost is not working
            - name: DATA_SOURCE_USER
              value: todo
            - name: DATA_SOURCE_PASS
              value: todo
            - name: PG_EXPORTER_WEB_TELEMETRY_PATH
              value: /metrics
            - name: PG_EXPORTER_DISABLE_DEFAULT_METRICS
              value: "false"
            - name: PG_EXPORTER_EXTEND_QUERY_PATH
              value: /etc/config/queries.yml
          ports:
            - containerPort: 9187
          resources: {}
          volumeMounts:
            - name: todo-db-exporter-volume
              mountPath: /etc/config/
      restartPolicy: Always
      volumes:
        - name: todo-db-exporter-volume
          configMap:
            name: postgres-exporter-conf
        - name: init-db-volume
          configMap:
            name: init-db-conf
status: {}
---
apiVersion: v1
kind: Service
metadata:
  name: todo-service
  namespace: todo-application
spec:
  type: LoadBalancer
  selector:
    service: todo
  ports:
    - name: "application"
      port: 5555
      targetPort: 5555
      nodePort: 31555
    - name: "inspectit"
      port: 8888
      targetPort: 8888
    - name: "database"
      port: 5432
      targetPort: 5432
    - name: "database-exporter"
      port: 9187
      targetPort: 9187
status:
  loadBalancer: {}
